一、本程序是一个管理OpenVPN的帐号的Web程序，主要功能
1、用户的增/删/改/查
2、查看用户的登录日志


二、与OpenVPN默认管理方式对比

	1、原来OpenVPN是通过文件来管理用户名和密码的，需要ssh到服务器上管理，现在通过Web管理，不用ssh到服务器去管理用户
	2、密码原来是明文，现在是加密的
	3、日志入库，通过Web看登录日志



三、安装sqlite
因为我们vpnauth用的是sqlite3数据库，在安装Python前，需要确认系统上已经安装sqlite3和sqlite3的开发库，否则在Python安装过程中
如果找不到sqlite3的开发库，就不会编译安装sqlite3的相关模块
	yum -y install sqlite sqlite-devel

四、下载相关软件	
	mkdir /root/python
	cd /root/python
	wget http://www.python.org/ftp/python/2.7.2/Python-2.7.2.tar.bz2
	wget http://media.djangoproject.com/releases/1.3/Django-1.3.tar.gz
	wget http://projects.unbit.it/downloads/uwsgi-0.9.8.3.tar.gz

	
五、安装相关软件，如果原来已经有安装，可以忽略
	##安装Python和Django
		tar xjf Python-2.7.2.tar.bz2
		cd Python-2.7.2
		./configure --prefix=/opt/python27
		make && make install
		ln -s /opt/python27/bin/python2.7 /usr/bin/
		
		cd /root/python
		tar xzf Django-1.3.tar.gz
		cd Django-1.3
		/opt/python27/bin/python2.7 setup.py install
		
	##安装Nginx	
		cd /dist/src
		rm -rf nginx-0.8.40
		tar zxf ../dist/nginx-0.8.40.tar.gz
		cd nginx-0.8.40/
		
		sed -i 's#CFLAGS="$CFLAGS -g"#CFLAGS="$CFLAGS "#' auto/cc/gcc
		
		make clean
		
		CHOST="x86_64-pc-linux-gnu" CFLAGS="-march=nocona -O2 -pipe" CXXFLAGS="-march=nocona -O2 -pipe" \
		./configure --user=www --group=www \
		--prefix=/usr/local/nginx \
		--with-http_stub_status_module \
		--with-google_perftools_module
		
		make && make install
		
		#创建Nginx日志目录
		mkdir -p /data/logs
		chmod +w /data/logs
		chown -R www:www /data/logs
		
		cd /usr/local/nginx/
		mv conf conf_bak
		ln -s /data/conf/nginx/ conf
		mkdir /data/conf/nginx/vhost
		vi /
		
		echo 'export LD_PRELOAD=/usr/local/lib/libtcmalloc.so' > /root/nginx_start
		echo 'ulimit -SHn 65535' >> /root/nginx_start
		echo '/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf' >> /root/nginx_start
		
		echo '/usr/local/nginx/sbin/nginx -t' > /root/nginx_reload
		echo 'kill -HUP `cat /usr/local/nginx/logs/nginx.pid`' >> /root/nginx_reload
		
		chmod 700 /root/nginx_*
	
	##安装uwsgi
		这里安装是有区分Python版本的，我们用的是Python 2.7
		cd /root/python
		tar xzf uwsgi-0.9.8.3.tar.gz 
		cd uwsgi-0.9.8.3
		vi Makefile.Py27
		将python2.7替换成我们Python的路径/opt/python27/bin/python2.7
		修改后是这样
		all:
				/opt/python27/bin/python2.7 uwsgiconfig.py --build
				
		make -f Makefile.Py27
		编译完成后，会在当前目录生成uwsgi文件，我们把它拷贝到/usr/bin目录下
		/bin/cp uwsgi /usr/bin/
六、部署程序	
	我们把应用放到/data/django下
	mkdir /data/django
	cd /data/django
	tar xf vpnauth.tar.gz
	先看下解压缩出来后的文件
	主要是2个目录
	1、脚本和配置
	scripts-and-conf 
	cd scripts-and-conf
		checkpsw.py #OpenVPN认证的脚本，假设OpenVPN的配置放在/etc/openvpn下
		
		/bin/cp checkpsw.py /etc/openvpn
		chmod 755 /etc/openvpn/checkpsw.py
		
		uwsgi_start	   #开启uwsgi的脚本	
		uwsgi_reload   #重启uwsgi
		uwsgi_stop		#关闭uwsgi的脚本
		
		/bin/cp uwsgi_start uwsgi_reload uwsgi_stop /root/
		chmod 700 /root/uwsgi*
		
		uwsgi.xml	  #uwsgi的配置文件
		uwsgi_params  #Nginx处理uwsgi的配置文件
		vpnauth.conf	#Nginx的虚拟主机配置文件
		
		/bin/cp uwsgi_params /data/conf/nginx
		/bin/cp vpnauth.conf /data/conf/nginx/vhost
		vi /data/conf/nginx/nginx.conf
		在最后一个}前加入以下内容
		include vhost/* ;
		使Nginx包含vhost下的配置文件
		
		conv_to_db.py #读取原来的密码文件，把帐号密码存到数据库
	2、主程序	
	vpnauth  
		#开始配置
		#OpenVPN是以nobody用户运行的，这里把程序的所有者也改成nobody
		chown -R nobody.nobody vpnauth
		cd vpnauth
		#创建数据库结构和超级管理员用户
		python2.7 manage.py syncdb

七、修改OpenVPN配置文件
vi /etc/openvpn/server.conf
将
auth-user-pass-verify /etc/openvpn/checkpsw.sh via-env
改为
auth-user-pass-verify /etc/openvpn/checkpsw.py via-env

service openvpn restart

		
八、开启程序，进行访问		
/root/nginx_start
/root/uwsgi_start

改密码地址
http://vpnauth.example.com/

管理后台地址
http://vpnauth.example.com/admin



九、其他东西
将现有帐号密码导入到数据库中
参见conv_to_db.py


编写用户认证的脚本
参见checkpsw.py
原理:从环境变量获得username和password，然后调用authenticate进行验证，如果有该用户，则退出状态为0，表示认证成功，否则退出状态为1，验证不成功，主要是参考checkpsw.sh改的。



一些命令
创建超级用户
cd /data/django/vpnauth
python2.7 manage.py createsuperuser

进控制台操作
python2.7 manager.py shell
from django.contrib.auth.models import User

创建用户
u=User.objects.create_user(username=urname,password=urpassword,email='urname@example.com')
u.save

以下操作先执行这句
u=User.objects.all()
查看所有用户
u
查看第一个用户的用户名
u[0].username
查看第一个用户的密码
u[0].password

删除所有用户
u.delete()

#####
交流QQ群
92512677


