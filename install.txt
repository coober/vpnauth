因为我们vpnauth用的是sqlite3数据库，在安装Python前，需要确认系统上已经安装sqlite3和sqlite3的开发库，否则在Python安装过程中
如果找不到sqlite3的开发库，就不会编译安装sqlite3的相关模块
yum -y install sqlite sqlite-devel
mkdir /root/python
cd /root/python
wget http://www.python.org/ftp/python/2.7.2/Python-2.7.2.tar.bz2
wget http://media.djangoproject.com/releases/1.3/Django-1.3.tar.gz
wget http://projects.unbit.it/downloads/uwsgi-0.9.8.3.tar.gz

tar xjf Python-2.7.2.tar.bz2
cd Python-2.7.2
./configure --prefix=/opt/python27
make && make install
ln -s /opt/python27/bin/python2.7 /usr/bin/

cd /root/python
tar xzf Django-1.3.tar.gz
cd Django-1.3
/opt/python27/bin/python2.7 setup.py install

cd /dist/src
rm -rf nginx-0.8.40
tar zxf ../dist/nginx-0.8.40.tar.gz
cd nginx-0.8.40/

sed -i 's#CFLAGS="$CFLAGS -g"#CFLAGS="$CFLAGS "#' auto/cc/gcc

make clean

CHOST="x86_64-pc-linux-gnu" CFLAGS="-march=nocona -O2 -pipe" CXXFLAGS="-march=nocona -O2 -pipe" \
./configure --user=www --group=www \
--prefix=/usr/local/nginx \
--with-http_stub_status_module \
--with-google_perftools_module

make && make install

#创建Nginx日志目录
mkdir -p /data/logs
chmod +w /data/logs
chown -R www:www /data/logs

cd /usr/local/nginx/
mv conf conf_bak
ln -s /data/conf/nginx/ conf

echo 'export LD_PRELOAD=/usr/local/lib/libtcmalloc.so' > /root/nginx_start
echo 'ulimit -SHn 65535' >> /root/nginx_start
echo '/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf' >> /root/nginx_start

echo '/usr/local/nginx/sbin/nginx -t' > /root/nginx_reload
echo 'kill -HUP `cat /usr/local/nginx/logs/nginx.pid`' >> /root/nginx_reload

chmod 700 /root/nginx_*

uwsgi安装，这里安装是有区分Python版本的，我们用的是Python 2.7
cd /root/python
tar xzf uwsgi-0.9.8.3.tar.gz 
cd uwsgi-0.9.8.3
vi Makefile.Py27
将python2.7替换成我们Python的路径/opt/python27/bin/python2.7
修改后是这样
all:
        /opt/python27/bin/python2.7 uwsgiconfig.py --build
		
make -f Makefile.Py27
编译完成后，会在当前目录生成uwsgi文件，我们把它拷贝到/usr/bin目录下
/bin/cp uwsgi /usr/bin/

我们把我们的应用放到/data/django下
mkdir /data/django
cd /data/django
tar xf vpnauth.tar
cd vpnauth

编写uwsgi的配置文件
vi uwsgi.xml

<uwsgi>
<socket>0.0.0.0:8000</socket>
<listen>16</listen>
<processes>8</processes>    #开启8个线程
<max-requests>2048000</max-requests>
<buffer-size>8192</buffer-size>
<module>django_wsgi</module>     #你的配置文件,需要放到应用根目录/data/django/vpnauth/django_wsgi.py
<profiler>true</profiler>
<enable-threads>true</enable-threads>
<pythonpath>/data/django/</pythonpath>
<pythonpath>/data/django/vpnauth/</pythonpath>
<limit-as>256</limit-as>    #限制内存空间256M
<disable-logging/>
<daemonize>/var/log/uwsgi.log</daemonize>
</uwsgi>

编辑配置文件
vi django_wsgi.py
#!/opt/python27/bin/python2.7
import os
import django.core.handlers.wsgi
os.environ['DJANGO_SETTINGS_MODULE'] = 'vpnauth.settings'
application = django.core.handlers.wsgi.WSGIHandler()

vi /usr/local/nginx/conf/uwsgi_params
uwsgi_param  QUERY_STRING       $query_string; 
uwsgi_param  REQUEST_METHOD     $request_method; 
uwsgi_param  CONTENT_TYPE       $content_type; 
uwsgi_param  CONTENT_LENGTH     $content_length; 

uwsgi_param  REQUEST_URI        $request_uri; 
uwsgi_param  PATH_INFO          $document_uri; 
uwsgi_param  DOCUMENT_ROOT      $document_root; 
uwsgi_param  SERVER_PROTOCOL    $server_protocol; 

uwsgi_param  REMOTE_ADDR        $remote_addr; 
uwsgi_param  REMOTE_PORT        $remote_port; 
uwsgi_param  SERVER_PORT        $server_port; 
uwsgi_param  SERVER_NAME        $server_name; 


vi /usr/local/nginx/conf/vhost/vpnauth.conf
server {
        listen   80;
        server_name vpnauth.example.com;
        access_log /var/log/access_log;
		error_log /var/log/error_log;
        location / {
                root   /data/django/vpnauth;
                uwsgi_pass 127.0.0.1:8000;
                include        uwsgi_params;
        }
		        location /static/admin/{
        alias /opt/python27/lib/python2.7/site-packages/django/contrib/admin/media/;
        break;
        }
}


vi /root/uwsgi_start
cd /data/django/vpnauth/
/usr/bin/uwsgi -x uwsgi.xml

vi /root/uwsgi_stop
killall uwsgi

chmod 700 /root/uwsgi* 

/root/nginx_start
/root/uwsgi_start

改密码地址
http://vpnauth.example.com/

管理后台地址
http://vpnauth.example.com/admin

将现有帐号密码导入到数据库中
参见conv_to_db.py


编写用户认证的脚本
参见checkpsw.py
原理:从环境变量获得username和password，然后调用authenticate进行验证，如果有该用户，则退出状态为0，表示认证成功，否则退出状态为1，验证不成功，主要是参考checkpsw.sh改的。

修改OpenVPN配置文件
vi /etc/openvpn/server.conf
将
auth-user-pass-verify /etc/openvpn/checkpsw.sh via-env
改为
auth-user-pass-verify /etc/openvpn/checkpsw.py via-env

service openvpn restart

可以用以下命令跟踪认证过程
tail -f /var/log/openvpn.log


一些命令
创建超级用户
cd /data/django/vpnauth
python2.7 manage.py createsuperuser

进控制台操作
python2.7 manager.py shell
from django.contrib.auth.models import User

创建用户
u=User.objects.create_user(username=urname,password=urpassword,email='urname@example.com')
u.save

以下操作先执行这句
u=User.objects.all()
查看所有用户
u
查看第一个用户的用户名
u[0].username
查看第一个用户的密码
u[0].password

删除所有用户
u.delete()




